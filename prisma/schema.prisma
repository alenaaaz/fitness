// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
    id    String @id @default(cuid())
    name  String @unique
    users User[] @relation("UserRoles")
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    WorkoutEvent  WorkoutEvent[]
    Workout       Workout[]

    role UserRole @default(USER)
    Role Role[]   @relation("UserRoles")

    trainerId         String?
    trainer           User?               @relation("TrainerClients", fields: [trainerId], references: [id])
    clients           User[]              @relation("TrainerClients")
    createdAt         DateTime            @default(now())
    WorkoutAssignment WorkoutAssignment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Workout {
    id          String              @id @default(cuid())
    title       String
    type        String
    duration    Int
    description String?
    userId      String?
    user        User?               @relation(fields: [userId], references: [id])
    exercises   Exercise[]
    events      WorkoutEvent[]
    createdAt   DateTime            @default(now())
    assignment  WorkoutAssignment[]
}

model WorkoutAssignment {
    id        String  @id @default(cuid())
    workout   Workout @relation(fields: [workoutId], references: [id])
    workoutId String
    user      User    @relation(fields: [userId], references: [id])
    userId    String

    @@unique([workoutId, userId])
}

model Exercise {
    id        String  @id @default(cuid())
    name      String
    sets      Int
    reps      Int
    duration  Int?
    weight    Float?
    workoutId String
    workout   Workout @relation(fields: [workoutId], references: [id])
}

model WorkoutEvent {
    id        String    @id @default(cuid())
    title     String
    start     DateTime
    end       DateTime?
    userId    String
    user      User      @relation(fields: [userId], references: [id])
    workoutId String?
    workout   Workout?  @relation(fields: [workoutId], references: [id])
}

enum UserRole {
    USER
    TRAINER
    ADMIN
}
